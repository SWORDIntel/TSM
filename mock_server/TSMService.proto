syntax = "proto3";

package tsm;

// The core service for managing TSM sessions
service TSMService {
  // Retrieves a list of all available sessions
  rpc ListSessions(Empty) returns (SessionList);

  // Retrieves the data for a specific session
  rpc GetSessionData(GetSessionDataRequest) returns (GetSessionDataResponse);

  // Analyzes a session for security risks
  rpc AnalyzeSession(AnalyzeSessionRequest) returns (AnalyzeSessionResponse);

  // Activates a specific session
  rpc SwitchSession(SwitchRequest) returns (SwitchResponse);

  // Retrieves detailed information about a specific session
  rpc GetSessionDetails(GetSessionDetailsRequest) returns (GetSessionDetailsResponse);

  // Starts the SRP authentication process
  rpc StartSRPAuthentication(SRPAuthenticationRequest) returns (SRPChallengeResponse);

  // Verifies the client's SRP proof
  rpc VerifySRP(SRPVerifyRequest) returns (SRPVerifyResponse);

  // Performs a search on encrypted data
  rpc EncryptedSearch(EncryptedSearchRequest) returns (SearchResponse);

  // Starts the ZK-proof authentication process
  rpc StartZKAuthentication(ZKAuthenticationRequest) returns (ZKChallengeResponse);

  // Verifies the client's ZK-proof
  rpc VerifyZKProof(ZKProofRequest) returns (ZKProofResponse);

  // Streams a backup of a specific session
  rpc BackupSession(BackupRequest) returns (stream BackupChunk);

  // Retrieves system performance and status metrics
  rpc GetMetrics(Empty) returns (SystemMetrics);
}

// Represents an empty message
message Empty {}

// Request to get session data
message GetSessionDataRequest {
  string session_id = 1;
}

// Response with session data
message GetSessionDataResponse {
  bytes decrypted_data = 1;
}

// Request to analyze a session
message AnalyzeSessionRequest {
  Session session = 1;
}

// Response with security analysis
message AnalyzeSessionResponse {
  SecurityReport report = 1;
}

// Security report
message SecurityReport {
  float risk_score = 1;
  repeated string threats = 2;
  repeated string recommends = 3;
}

// Request to get session details
message GetSessionDetailsRequest {
  string session_id = 1;
}

// Response with session details
message GetSessionDetailsResponse {
  Session session = 1;
}

// Request to start SRP authentication
message SRPAuthenticationRequest {
  string username = 1;
}

// SRP challenge response
message SRPChallengeResponse {
  bytes salt = 1;
  bytes serverB = 2;
}

// Request to verify SRP
message SRPVerifyRequest {
  bytes clientA = 1;
}

// SRP verify response
message SRPVerifyResponse {
  bytes m2 = 1;
}

// Request for encrypted search
message EncryptedSearchRequest {
  string encrypted_query = 1;
}

// Response for encrypted search
message SearchResponse {
  repeated string matching_session_ids = 1;
}

// A single TSM session's metadata
message Session {
  string id = 1;
  string name = 2;
  int64 created_timestamp = 3;
  int64 size_bytes = 4;
  bool is_encrypted = 5;
  repeated string tags = 6;
}

// A list of sessions
message SessionList {
  repeated Session sessions = 1;
}

// Request to switch to a new session
message SwitchRequest {
  string session_id = 1;
}

// Response from a session switch operation
message SwitchResponse {
  bool success = 1;
  string message = 2;
}

// Request to back up a session
message BackupRequest {
  string session_id = 1;
}

// A chunk of a session backup file
message BackupChunk {
  bytes data = 1;
}

// System metrics
message SystemMetrics {
  float cpu_usage_percent = 1;
  int64 memory_usage_bytes = 2;
  int32 active_sessions = 3;
}

// Request to start ZK authentication
message ZKAuthenticationRequest {
  string username = 1;
}

// ZK challenge response
message ZKChallengeResponse {
  string H = 1;
}

// Request to verify ZK proof
message ZKProofRequest {
  string username = 1;
  string proof = 2;
}

// ZK proof response
message ZKProofResponse {
  string session_token = 1;
}
